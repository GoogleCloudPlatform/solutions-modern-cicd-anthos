# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s # 1hr
tags:
  - modern-cicd-anthos
substitutions:
  _DOMAIN: ""
  _BUILD_IMAGES: "true"
options:
  substitution_option: 'ALLOW_LOOSE'
steps:
- name: 'gcr.io/cloud-builders/gsutil'
  id: 'create-tf-state-bucket'
  entrypoint: 'bash'
  args:
  - '-xe'
  - '-c'
  - |
    gsutil mb gs://${PROJECT_ID}-anthos-platform-tf-state || true

- name: 'gcr.io/cloud-builders/gsutil'
  id: 'starter-repo-reference'
  entrypoint: 'bash'
  args:
  - '-xe'
  - '-c'
  - |
    gsutil mb gs://${PROJECT_ID}-starter-repos || true
    gsutil cp -r starter-repos gs://${PROJECT_ID}-starter-repos # TODO: use -m?

# Create build-installation-image
- name: "gcr.io/cloud-builders/gcloud"
  id: "build-install-image"
  entrypoint: bash
  args:
    - -c
    - |
      [[ "${_BUILD_IMAGES}" == "false" ]] && exit 0
      gcloud builds submit --config=build-image/cloudbuild.yaml

# - name: "gcr.io/cloud-builders/gcloud"
#   id: cleanup-sub-jobs
#   entrypoint: bash
#   args:
#     - -c
#     - |
#       gcloud builds list --ongoing --filter='tags[]~modern-cicd-anthos' --format='value(id)' | \
#         xargs --no-run-if-empty gcloud builds cancel

# Foundation
- name: "gcr.io/cloud-builders/gcloud"
  id: "trigger-foundation"
  dir: "0_foundation"
  entrypoint: bash
  args:
    - -c
    - |
      gcloud builds submit
  waitFor:
    - build-install-image

# Clusters
- name: "gcr.io/cloud-builders/gcloud"
  id: "trigger-clusters"
  dir: "1_clusters"
  entrypoint: bash
  args:
    - -c
    - |
      gcloud builds submit
  waitFor:
    - trigger-foundation

# CICD
- name: "gcr.io/cloud-builders/gcloud"
  id: "trigger-gitlab"
  dir: "2_gitlab"
  entrypoint: bash
  args:
    - -c
    - |
      gcloud builds submit --substitutions=_DOMAIN=${_DOMAIN}
  waitFor:
    - trigger-clusters

# ACM


# Apps
      # [[ "${INSTALL_APPS}" == "false" ]] && exit 0



#     # Configure ACM CI

#     # Get an Oauth Token to authenticate with GitLab API
#     cat > auth.txt <<EOF
#     grant_type=password&username=root&password=$${GITLAB_PASSWORD}
#     EOF
#     export GITLAB_OAUTH_TOKEN=$(curl -k --data "@auth.txt" --request POST https://gitlab.${_DOMAIN}/oauth/token | jq -r .access_token)

#     # Get ACM repo project ID
#     export ACM_PROJECT_ID=$(curl -k -s "https://gitlab.${_DOMAIN}/api/v4/projects?search=anthos-config-management&access_token=$${GITLAB_OAUTH_TOKEN}" | jq -r .[0].id)

#     # Get runner registration token from GitLab
#     export ACM_RUNNER_TOKEN=$(curl -k -s "https://gitlab.${_DOMAIN}/api/v4/projects/$${ACM_PROJECT_ID}?access_token=$${GITLAB_OAUTH_TOKEN}" | jq -r .runners_token)

#     # Install ACM
#     cd 3_acm
#     ./install_acm.sh
#     cd ..

#     # Install demo apps Hipster Shop app (by microservice), and Petabank app
#     cd 4_demo
#     ./provision-applications.sh

#     # Add IAM policies to GSA service accounts
#     export PROJECT_ID=${PROJECT_ID}
#     ./add-gsa-iam-policies.sh

#     # Copy source code to repositories and trigger pipelines
#     ./build-applications.sh

#     # Modify default Network Policies
#     ./modify-network-policies.sh

#     # Delete apps created from initial pipeline run
#     ./delete-templates.sh
#     cd ..

#     # Output final notes
#     echo -e "\e[32mLog in to your GitLab instance at: https://gitlab.${_DOMAIN}"
#     echo -e "\e[32mUsername: root"
#     echo -e "\e[32mPassword: $${GITLAB_PASSWORD}"
#     echo
#     echo -e "\e[32mVisit the user guide in the docs (docs/index.md) to go through a user journey (add, deploy, and change applications)."
