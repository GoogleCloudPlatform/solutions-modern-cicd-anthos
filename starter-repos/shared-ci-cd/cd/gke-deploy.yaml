# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

deploy-staging-us-west2:
  # Only deploy to staging env from $APP-env staging branch, kicking off rollout
  only:
    refs:
      - staging
  stage: deploy-staging-us-west2
  image: gcr.io/cloud-builders/gke-deploy:stable
  tags:
  - cluster:staging-us-west2
  script:
    - if [ ! -f stg.yaml ]; then exit 0; fi # stops run if stg.yaml file does not exist in the branch (usually on initial install)
    # Work around for https://github.com/kubernetes/kubernetes/issues/36072
    # Stated solution is to use "--force" or "kubectl create"; gke-deploy does not have this option so the following works
    # Get all services that have the "kubectl.kubernetes.io/last-applied-configuration" annotation and put into an environment variable
    - export SERVICENAMES=$(kubectl get svc -o jsonpath="{range .items[?(@.metadata.annotations.kubectl\.kubernetes\.io/last-applied-configuration)]}{.metadata.name}{':'}{end}")
    # for each service name, remove the annotation
    - echo $SERVICENAMES | tr -d '\n' | tr ':' '\0' | xargs -0 -I {} kubectl annotate svc {} kubectl.kubernetes.io/last-applied-configuration-
    - /gke-deploy run --filename stg.yaml

deploy-prod-us-east1:
  # Only deploy when running on master in $APP-env
  only:
    refs:
      - master
  stage: deploy-prod-us-east1
  image: gcr.io/cloud-builders/gke-deploy:stable
  tags:
  - cluster:prod-us-east1
  script:
    - if [ ! -f prod.yaml ]; then exit 0; fi # stops run if stg.yaml file does not exist in the branch (usually on initial install)
    # Work around for https://github.com/kubernetes/kubernetes/issues/36072
    # Stated solution is to use "--force" or "kubectl create"; gke-deploy does not have this option so the following works
    # Get all services that have the "kubectl.kubernetes.io/last-applied-configuration" annotation and put into an environment variable
    - export SERVICENAMES=$(kubectl get svc -o jsonpath="{range .items[?(@.metadata.annotations.kubectl\.kubernetes\.io/last-applied-configuration)]}{.metadata.name}{':'}{end}")
    # for each service name, remove the annotation
    - echo $SERVICENAMES | tr -d '\n' | tr ':' '\0' | xargs -0 -I {} kubectl annotate svc {} kubectl.kubernetes.io/last-applied-configuration-
    - /gke-deploy run --filename prod.yaml

deploy-prod-us-central1:
  # Only deploy when running on master in $APP-env
  only:
    refs:
      - master
  stage: deploy-prod-us-central1
  image: gcr.io/cloud-builders/gke-deploy:stable
  tags:
  - cluster:prod-us-central1
  script:
    - if [ ! -f prod.yaml ]; then exit 0; fi # stops run if stg.yaml file does not exist in the branch (usually on initial install)
    # Work around for https://github.com/kubernetes/kubernetes/issues/36072
    # Stated solution is to use "--force" or "kubectl create"; gke-deploy does not have this option so the following works
    # Get all services that have the "kubectl.kubernetes.io/last-applied-configuration" annotation and put into an environment variable
    - export SERVICENAMES=$(kubectl get svc -o jsonpath="{range .items[?(@.metadata.annotations.kubectl\.kubernetes\.io/last-applied-configuration)]}{.metadata.name}{':'}{end}")
    # for each service name, remove the annotation
    - echo $SERVICENAMES | tr -d '\n' | tr ':' '\0' | xargs -0 -I {} kubectl annotate svc {} kubectl.kubernetes.io/last-applied-configuration-
    - /gke-deploy run --filename prod.yaml

rollout-approval:
  # Only require manual approval on master in $APP-env
  only:
    refs:
      - master
  stage: rollout-approval
  script:
  - echo "Continue with production rollout"
  when: manual
  allow_failure: false