apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      role: master
  serviceName: redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.7.16
        role: master
      annotations:
        checksum/health: 19e3db9d87c3dec847c02e83d1a63067296327d5f2385136c734603d2607d0a3
        checksum/configmap: 56cfc1d923c62ce5c559fb1e8ea3fbfeca1dbb38bc09c77ce25fc6581a51bb7b
        checksum/secret: f8f80c5aedcd221c4765a694dd1c07917863b58300618515ff3c601451a31b6b
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
      - name: redis
        image: 'docker.io/bitnami/redis:6.0.6-debian-10-r10'
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - '-c'
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_TLS_ENABLED
          value: 'no'
        - name: REDIS_PORT
          value: '6379'
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - '-c'
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - '-c'
            - /health/ping_readiness_local.sh 5
        resources: null
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: null
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      volumes:
      - name: health
        configMap:
          name: redis-health
          defaultMode: 493
      - name: config
        configMap:
          name: redis
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        heritage: Helm
        component: master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-slave
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
spec:
  replicas: 2
  serviceName: redis-headless
  selector:
    matchLabels:
      app: redis
      role: slave
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.7.16
        role: slave
      annotations:
        checksum/health: 19e3db9d87c3dec847c02e83d1a63067296327d5f2385136c734603d2607d0a3
        checksum/configmap: 56cfc1d923c62ce5c559fb1e8ea3fbfeca1dbb38bc09c77ce25fc6581a51bb7b
        checksum/secret: 9a0eeaa23857c0a53149fe9a78a32090dc49802d1696374a7d760bfbe420f3d1
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
      - name: redis
        image: 'docker.io/bitnami/redis:6.0.6-debian-10-r10'
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - '-c'
        - >
          if [[ -n $REDIS_PASSWORD_FILE ]]; then


            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi

          if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then


            password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
            export REDIS_MASTER_PASSWORD=$password_aux
          fi

          if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then


            cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
          fi

          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then


            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi

          ARGS=("--port" "${REDIS_PORT}")

          ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")

          ARGS+=("--requirepass" "${REDIS_PASSWORD}")

          ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")

          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")

          ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")

          /run.sh "${ARGS[@]}"

        env:
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_MASTER_HOST
          value: >-
            redis-master-0.redis-headless.$(REDIS_INSTALL_NAMESPACE).svc.cluster.local
        - name: REDIS_MASTER_PORT_NUMBER
          value: '6379'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_TLS_ENABLED
          value: 'no'
        - name: REDIS_PORT
          value: '6379'
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - '-c'
            - /health/ping_liveness_local_and_master.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - '-c'
            - /health/ping_readiness_local_and_master.sh 5
        resources: null
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc
      volumes:
      - name: health
        configMap:
          name: redis-health
          defaultMode: 493
      - name: config
        configMap:
          name: redis
      - name: sentinel-tmp-conf
        emptyDir: {}
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        heritage: Helm
        component: slave
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-health
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
data:
  ping_readiness_local.sh: >-
    #!/bin/bash

    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)

    response=$(


      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )

    if [ "$response" != "PONG" ]; then


      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: >-
    #!/bin/bash

    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)

    response=$(


      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )

    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the
    dataset in memory" ]; then


      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: >-
    #!/bin/bash

    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)


     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )

    if [ "$response" != "PONG" ]; then


      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: >-
    #!/bin/bash

    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)

    response=$(


      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )

    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the
    dataset in memory" ]; then


      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
type: Opaque
data:
  redis-password: TEtac2U3TDJpYQ==
---
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  namespace: default
  labels:
    app: redis
    chart: redis-10.7.16
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    role: slave
